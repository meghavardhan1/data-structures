#include <stdio.h>
#include <stdlib.h>

// Structure to represent an adjacency list node
struct Node {
    int vertex;
    struct Node* next;
};

// Structure to represent an adjacency list
struct AdjList {
    struct Node* head;
};

// Structure to represent a graph
struct Graph {
    int numVertices;
    struct AdjList* array;
};

// Function to create a new adjacency list node
struct Node* createNode(int vertex) {
    struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with given vertices
struct Graph* createGraph(int vertices) {
    struct Graph* graph = (struct Graph*) malloc(sizeof(struct Graph));
    graph->numVertices = vertices;
    graph->array = (struct AdjList*) malloc(vertices * sizeof(struct AdjList));
    for (int i = 0; i < vertices; i++)
        graph->array[i].head = NULL;
    return graph;
}

// Function to add an edge to an undirected graph
void addEdge(struct Graph* graph, int src, int dest) {
    // Add an edge from src to dest
    struct Node* newNode = createNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;

    // Since graph is undirected, add an edge from dest to src also
    newNode = createNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}

// BFS function to find the shortest path between two vertices
int BFS(struct Graph* graph, int startVertex, int endVertex) {
    int* visited = (int*) malloc(graph->numVertices * sizeof(int));
    int* distance = (int*) malloc(graph->numVertices * sizeof(int));

    for (int i = 0; i < graph->numVertices; i++) {
        visited[i] = 0;
        distance[i] = -1;
    }

    struct Node** queue = (struct Node**) malloc(graph->numVertices * sizeof(struct Node*));
    int front = 0, rear = 0;

    visited[startVertex] = 1;
    distance[startVertex] = 0;
    queue[rear++] = createNode(startVertex);

    while (front != rear) {
        int currentVertex = queue[front++]->vertex;
        struct Node* temp = graph->array[currentVertex].head;

        while (temp) {
            int adjVertex = temp->vertex;

            if (!visited[adjVertex]) {
                visited[adjVertex] = 1;
                distance[adjVertex] = distance[currentVertex] + 1;
                queue[rear++] = createNode(adjVertex);

                if (adjVertex == endVertex) {
                    free(queue);
                    free(visited);
                    return distance[adjVertex];
                }
            }
            temp = temp->next;
        }
    }

    free(queue);
    free(visited);
    return -1;  // If there is no path between startVertex and endVertex
}

int main() {
    int N, M, u, v;

    // Input number of vertices and edges
    printf("Enter number of vertices and edges: ");
    scanf("%d %d", &N, &M);

    struct Graph* graph = createGraph(N);

    // Input edges
    printf("Enter the edges (u, v):\n");
    for (int i = 0; i < M; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        addEdge(graph, u-1, v-1);  // assuming vertices are 1-based
    }

    // Input vertices to find the shortest path
    printf("Enter the vertices (u, v) to find the shortest path: ");
    scanf("%d %d", &u, &v);

    int result = BFS(graph, u-1, v-1);
    if (result != -1) {
        printf("The minimum number of edges between %d and %d is: %d\n", u, v, result);
    } else {
        printf("There is no path between %d and %d\n", u, v);
    }

    return 0;
}
